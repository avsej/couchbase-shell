mod analytics;
mod analytics_datasets;
mod analytics_dataverses;
mod analytics_indexes;
mod buckets;
mod buckets_config;
mod clusters;
mod clusters_health;
mod collections;
mod collections_create;
mod collections_get;
mod ctrlc_future;
mod data;
mod data_stats;
mod doc;
mod doc_get;
mod doc_insert;
mod doc_remove;
mod doc_replace;
mod doc_upsert;
mod fake_data;
#[cfg(not(target_os = "windows"))]
mod map;
mod nodes;
mod ping;
mod query;
mod query_advise;
mod query_indexes;
mod scopes;
mod scopes_create;
mod scopes_get;
mod search;
mod use_bucket;
mod use_cluster;
mod use_cmd;
mod use_collection;
mod use_scope;
mod users;
mod users_get;
mod users_roles;
mod users_upsert;
mod util;
mod version;
mod whoami;

pub use analytics::Analytics;
pub use analytics_datasets::AnalyticsDatasets;
pub use analytics_dataverses::AnalyticsDataverses;
pub use analytics_indexes::AnalyticsIndexes;
pub use buckets::Buckets;
pub use buckets_config::BucketsConfig;
pub use clusters::Clusters;
pub use clusters_health::ClustersHealth;
pub use collections::Collections;
pub use collections_create::CollectionsCreate;
pub use collections_get::CollectionsGet;
use couchbase::CouchbaseError;
pub use data::Data;
pub use data_stats::DataStats;
pub use doc::Doc;
pub use doc_get::DocGet;
pub use doc_insert::DocInsert;
pub use doc_remove::DocRemove;
pub use doc_replace::DocReplace;
pub use doc_upsert::DocUpsert;
pub use fake_data::FakeData;
#[cfg(not(target_os = "windows"))]
pub use map::Map;
pub use nodes::Nodes;
use nu_errors::ShellError;
pub use ping::Ping;
pub use query::Query;
pub use query_advise::QueryAdvise;
pub use query_indexes::QueryIndexes;
pub use scopes::Scopes;
pub use scopes_create::ScopesCreate;
pub use scopes_get::ScopesGet;
pub use search::Search;
pub use use_bucket::UseBucket;
pub use use_cluster::UseCluster;
pub use use_cmd::UseCmd;
pub use use_collection::UseCollection;
pub use use_scope::UseScope;
pub use users::Users;
pub use users_get::UsersGet;
pub use users_roles::UsersRoles;
pub use users_upsert::UsersUpsert;
pub use version::Version;
pub use whoami::Whoami;

fn convert_cb_error<T>(input: Result<T, CouchbaseError>) -> Result<T, ShellError> {
    input.map_err(|e| ShellError::untagged_runtime_error(format!("Couchbase SDK Error: {}", e)))
}

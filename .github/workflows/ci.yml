name: CI

on:
  pull_request:       # trigger on pull requests
  push:
    branches:         # array of glob patterns matching against refs/heads. Optional; defaults to all
      - main

env:
  # Could, potentially automatically parse
  # the bin name, but let's do it automatically for now.
  ARTIFACT_BIN: cbsh
  ARTIFACT_BIN_WINDOWS: cbsh.exe

  # Space separated paths to include in the archive.
  # Start relative paths with a dot if you don't want
  # paths to be preserved. Use "/" as a delimiter.
  ARTIFACT_ADDS: README.md LICENSE examples LICENSE_AGREEMENT NOTICES

  SHA8: ${GITHUB_SHA::8}

jobs:
  build:
    name: Build

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build: [linux, macos, windows]
        include:
          - build: linux
            os: ubuntu-22.04
            rust: stable
          - build: macos
            os: macos-latest
            rust: stable
          - build: windows
            os: windows-latest
            rust: stable

    steps:
    - uses: actions/checkout@v1
    - name: Cache cargo registry
      uses: actions/cache@v1
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
    - name: Cache cargo index
      uses: actions/cache@v1
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
    - name: Cache cargo build
      uses: actions/cache@v1
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
    - uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true

    - name: Build
      uses: actions-rs/cargo@v1
      with:
        command: build
        args: --verbose
      if: matrix.os != 'windows-latest'

    - name: Build
      uses: actions-rs/cargo@v1
      with:
        command: build
        args: --verbose
      env:
        VCPKGRS_DYNAMIC: 1
        RUSTFLAGS: -Ctarget-feature=+crt-static
      if: matrix.os == 'windows-latest'

    - name: Test
      uses: actions-rs/cargo@v1
      with:
        command: test
        args: --verbose

    - name: Create artifact directory
      run: mkdir artifacts

    - name: Create archive for Linux
      run: 7z a -ttar -so -an ./target/debug/${{ env.ARTIFACT_BIN }} ${{ env.ARTIFACT_ADDS }} | 7z a -si ./artifacts/${{ env.ARTIFACT_BIN }}-${{ env.SHA8 }}-linux-x86_64.tar.gz
      if: matrix.os == 'ubuntu-22.04'

    - name: Install p7zip
      # 7Zip not available on MacOS, install p7zip via homebrew.
      run: brew install p7zip
      if: matrix.os == 'macos-latest'

    - name: Create archive for MacOS
      run: 7z a -tzip ./artifacts/${{ env.ARTIFACT_BIN }}-${{ env.SHA8 }}-mac-x86_64.zip ./target/debug/${{ env.ARTIFACT_BIN }} ${{ env.ARTIFACT_ADDS }}
      if: matrix.os == 'macos-latest'

    - name: Create archive for Windows
      run: |
        choco install 7zip
        7z a -tzip ./artifacts/${{ env.ARTIFACT_BIN }}-${{ env.SHA8 }}-windows-x86_64.zip ./target/debug/${{ env.ARTIFACT_BIN_WINDOWS }} ${{ env.ARTIFACT_ADDS }}
      if: matrix.os == 'windows-latest'

    # This will double-zip
    # See - https://github.com/actions/upload-artifact/issues/39
    - uses: actions/upload-artifact@v1
      name: Upload archive
      with:
        name: ${{ runner.os }}
        path: artifacts/

  rustfmt:
    name: Rustfmt
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - run: rustup component add rustfmt
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

